{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/minakhan/git/PAL_2021/PAL_Stroop/Visualization_app/src/components/Games/stroop_test/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Stroop from '@orcatech/react-neuropsych-stroop';\nimport { useState } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction StroopTest(props) {\n  _s();\n\n  const [count, setCount] = useState({\n    total: 0,\n    score: 0,\n    lastResult: '',\n    words: [],\n    colors: []\n  });\n\n  if (count.colors.length == 0) {\n    var words = ['purple', 'black', 'green', 'red', 'blue', 'orange', 'pink', 'yellow'];\n    var words2 = [...words];\n    var colors = ['9370D8', '000000', '009900', 'ff0000', '000099', 'EE7600', 'FFC0CB', 'FFFF00'];\n    var colors2 = [...colors];\n    words2 = words.slice(0, props.len || 4);\n    colors2 = colors.slice(0, props.len || 4);\n    words = [...words2];\n    colors = [...colors];\n    shuffleArray(words2);\n    colors2 = [];\n    words2.forEach(word => {\n      colors2.push(colors[words.indexOf(word)]);\n    });\n    setCount({ ...count,\n      words: words2,\n      colors: colors2\n    });\n  }\n\n  var words = count.words;\n  var colors = count.colors;\n  const combos = [{\n    word: Math.floor(Math.random() * words.length),\n    color: Math.floor(Math.random() * words.length)\n  }];\n\n  var onComplete = data => {\n    // handle test completion\n    const {\n      errors,\n      successes,\n      begin,\n      finish,\n      timeLimitReached\n    } = data; //setCount({ ...count, total: count.total + 1 })\n  };\n\n  var onSuccess = data => {\n    setCount({ ...count,\n      total: count.total + 1,\n      score: count.score + 1,\n      lastResult: 'Correct!'\n    }); // handle each success that occurs\n  };\n\n  var onError = data => {\n    setCount({ ...count,\n      total: count.total + 1,\n      lastResult: 'Wrong!'\n    }); // handle each error that occurs\n  };\n\n  if (count.total == 10) {\n    props.onComplete(count.score);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\"Test completed. The score is \", count.score]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Question \", count.total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n      onComplete: () => {\n        setCount({ ...count,\n          total: count.total + 1,\n          lastResult: 'Out of time!'\n        });\n      },\n      isPlaying: true,\n      duration: 5,\n      size: 100,\n      colors: \"#000000\",\n      strokeWidth: 6,\n      children: ({\n        remainingTime\n      }) => remainingTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Stroop, {\n      buttonsPerRow: words.length / 2,\n      colors: colors,\n      combos: combos,\n      onComplete: onComplete,\n      onError: onError,\n      onSuccess: onSuccess,\n      words: words,\n      incorrectMessage: \"Incorrect!\",\n      completionMessage: \"Out of time!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: count.lastResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: count.score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, count.total, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StroopTest, \"7/PGwdSJj+RPZvxjWOGioRo28sg=\");\n\n_c = StroopTest;\nexport default StroopTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"StroopTest\");","map":{"version":3,"sources":["/Users/minakhan/git/PAL_2021/PAL_Stroop/Visualization_app/src/components/Games/stroop_test/index.jsx"],"names":["React","Stroop","useState","CountdownCircleTimer","shuffleArray","array","i","length","j","Math","floor","random","StroopTest","props","count","setCount","total","score","lastResult","words","colors","words2","colors2","slice","len","forEach","word","push","indexOf","combos","color","onComplete","data","errors","successes","begin","finish","timeLimitReached","onSuccess","onError","display","flexDirection","alignItems","remainingTime"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Stroop from '@orcatech/react-neuropsych-stroop';\nimport { useState } from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction StroopTest(props) {\n\n    const [count, setCount] = useState({ total: 0, score: 0, lastResult: '', words:[], colors:[] });\n\n    if (count.colors.length == 0) {\n        var words = ['purple', 'black','green', 'red', 'blue', 'orange', 'pink', 'yellow', ];\n        var words2 = [...words]\n        var colors = ['9370D8', '000000','009900', 'ff0000', '000099', 'EE7600', 'FFC0CB', 'FFFF00', ]\n        var colors2 = [...colors]\n\n        words2 = words.slice(0, props.len || 4)\n        colors2 = colors.slice(0, props.len || 4)\n\n        words = [...words2]\n        colors = [...colors]\n\n        shuffleArray(words2)\n        colors2=[]\n        words2.forEach((word) => {\n            colors2.push(colors[words.indexOf(word)])\n        })\n\n\n        setCount({ ...count, words: words2, colors: colors2 })\n    }\n\n    var words = count.words\n    var colors =count.colors\n\n    const combos = [{\n        word: Math.floor(Math.random() * words.length),\n        color: Math.floor(Math.random() * words.length)\n    }];\n\n    var onComplete = (data) => {\n        // handle test completion\n        const { errors, successes, begin, finish, timeLimitReached } = data;\n        //setCount({ ...count, total: count.total + 1 })\n\n    }\n\n    var onSuccess = (data) => {\n        setCount({ ...count, total: count.total + 1, score: count.score + 1, lastResult:'Correct!' })\n        // handle each success that occurs\n    }\n\n    var onError = (data) => {\n        setCount({ ...count, total: count.total + 1, lastResult: 'Wrong!'})\n        // handle each error that occurs\n    }\n    if (count.total == 10) {\n        props.onComplete(count.score)\n        return <>Test completed. The score is {count.score}</>\n    }\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }} key={count.total}>\n            <div>Question {count.total}</div>\n            <CountdownCircleTimer\n                onComplete={() => { setCount({ ...count, total: count.total + 1, lastResult: 'Out of time!'}) }}\n                isPlaying\n                duration={5}\n                size={100}\n                colors=\"#000000\"\n                strokeWidth={6}\n            >\n                {({ remainingTime }) => remainingTime}\n            </CountdownCircleTimer>\n\n            <Stroop\n                buttonsPerRow={words.length/2 }\n                colors={colors}\n                combos={combos}\n                onComplete={onComplete}\n                onError={onError}\n                onSuccess={onSuccess}\n                words={words}\n                incorrectMessage=\"Incorrect!\"\n                completionMessage=\"Out of time!\"\n            />\n            <div>\n                {count.lastResult}\n            </div>\n            <div>\n                {count.score}\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default StroopTest;\n\n\n"]},"metadata":{},"sourceType":"module"}