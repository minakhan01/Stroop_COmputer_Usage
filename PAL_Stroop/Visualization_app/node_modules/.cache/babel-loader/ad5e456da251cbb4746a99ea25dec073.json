{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createLogger } from 'redux-logger';\nexport default ((rootReducer, rootSaga) => {\n  const middlewares = [];\n  const enhancers = [];\n  const sagaMiddleware = createSagaMiddleware(); // All Redux Middlewares\n\n  middlewares.push(sagaMiddleware); // Saga Middleware\n\n  middlewares.push(createLogger()); // Redux Logger Middleware\n  // Assemble middlewares\n\n  enhancers.push(applyMiddleware(...middlewares)); // Create Redux Store\n\n  const store = createStore(rootReducer, compose(...enhancers)); // kick off root saga\n\n  const sagasManager = sagaMiddleware.run(rootSaga);\n  return {\n    store,\n    sagasManager,\n    sagaMiddleware\n  };\n});","map":{"version":3,"sources":["/Users/minakhan/git/PAL_2021/PAL_Stroop/Visualization_app/src/redux/configureStore.js"],"names":["createStore","applyMiddleware","compose","createSagaMiddleware","createLogger","rootReducer","rootSaga","middlewares","enhancers","sagaMiddleware","push","store","sagasManager","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;AAEA,gBAAe,CAACC,WAAD,EAAcC,QAAd,KAA2B;AACxC,QAAMC,WAAW,GAAG,EAApB;AACA,QAAMC,SAAS,GAAG,EAAlB;AAEA,QAAMC,cAAc,GAAGN,oBAAoB,EAA3C,CAJwC,CAMxC;;AACAI,EAAAA,WAAW,CAACG,IAAZ,CAAiBD,cAAjB,EAPwC,CAON;;AAClCF,EAAAA,WAAW,CAACG,IAAZ,CAAiBN,YAAY,EAA7B,EARwC,CAQN;AAElC;;AACAI,EAAAA,SAAS,CAACE,IAAV,CAAeT,eAAe,CAAC,GAAGM,WAAJ,CAA9B,EAXwC,CAaxC;;AACA,QAAMI,KAAK,GAAGX,WAAW,CAACK,WAAD,EAAcH,OAAO,CAAC,GAAGM,SAAJ,CAArB,CAAzB,CAdwC,CAgBxC;;AACA,QAAMI,YAAY,GAAGH,cAAc,CAACI,GAAf,CAAmBP,QAAnB,CAArB;AAEA,SAAO;AACLK,IAAAA,KADK;AAELC,IAAAA,YAFK;AAGLH,IAAAA;AAHK,GAAP;AAKD,CAxBD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createLogger } from 'redux-logger';\n\nexport default (rootReducer, rootSaga) => {\n  const middlewares = [];\n  const enhancers = [];\n\n  const sagaMiddleware = createSagaMiddleware();\n\n  // All Redux Middlewares\n  middlewares.push(sagaMiddleware); // Saga Middleware\n  middlewares.push(createLogger()); // Redux Logger Middleware\n\n  // Assemble middlewares\n  enhancers.push(applyMiddleware(...middlewares));\n\n  // Create Redux Store\n  const store = createStore(rootReducer, compose(...enhancers));\n\n  // kick off root saga\n  const sagasManager = sagaMiddleware.run(rootSaga);\n\n  return {\n    store,\n    sagasManager,\n    sagaMiddleware,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}