{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/minakhan/git/PAL_2021/PAL_Stroop/Visualization_app/src/screens/MainScreen/MainScreen.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Form, Input, Radio } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport Games from \"../../components/Games\";\nimport { machineId, machineIdSync } from 'node-machine-id';\nimport { store } from \"../../redux\";\nimport { dequeueUserData, setUserData } from \"../../redux/actions/userdata.action\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nconst {\n  ipcRenderer,\n  remote\n} = window.require('electron');\n\nfunction MainScreen() {\n  _s();\n\n  useEffect(() => {\n    setInterval(() => {\n      store.getState().userdata.pastQueue.forEach(ob => {\n        axios.post('https://thepallab.com/api/games/store', ob).then(store.dispatch(dequeueUserData(ob))).catch(console.log);\n      });\n    }, 1000);\n  });\n  var [stage, setStage] = useState({\n    stage: 'form'\n  });\n  var un = useSelector(state => state.userdata.uname);\n  const formItemLayout = {\n    labelCol: {\n      span: 6\n    },\n    wrapperCol: {\n      span: 14\n    }\n  };\n  /*\n   *  deviceid: \"Deshpandw\"\n      radio-group: \"a\"\n      username: \"Ajinku\"\n  */\n\n  var onSubmit = val => {\n    var uid = ipcRenderer.sendSync('synchronous-message', 'ping');\n    var did = val.deviceid;\n    var uname = val.username;\n    store.dispatch(setUserData({\n      uid: uid,\n      did: did,\n      uname: uname\n    }));\n    setStage({\n      stage: 'game'\n    });\n  };\n\n  console.log(store.getState());\n\n  if (stage.stage === \"form\" && un.length == 0) {\n    return /*#__PURE__*/_jsxDEV(Form, {\n      name: \"validate_other\",\n      ...formItemLayout,\n      onFinish: onSubmit,\n      initialValues: {\n        'input-number': 3,\n        'checkbox-group': ['A', 'B'],\n        rate: 3.5\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Username\",\n        name: \"username\",\n        rules: [{\n          required: true,\n          message: 'Please input your username!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Deviceid\",\n        name: \"deviceid\",\n        rules: [{\n          required: true,\n          message: 'Please input your device id!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        wrapperCol: {\n          span: 12,\n          offset: 6\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Begin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  } else {\n    var order = Math.floor(Math.random() * 2);\n    return /*#__PURE__*/_jsxDEV(Games, {\n      order: order,\n      onComplete: () => {\n        remote.getCurrentWindow().close();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 16\n    }, this);\n  }\n}\n\n_s(MainScreen, \"xKj3ld3Jc+2mjYGVAn9lGy1gcok=\", false, function () {\n  return [useSelector];\n});\n\n_c = MainScreen;\nexport default MainScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainScreen\");","map":{"version":3,"sources":["/Users/minakhan/git/PAL_2021/PAL_Stroop/Visualization_app/src/screens/MainScreen/MainScreen.jsx"],"names":["Button","Form","Input","Radio","useEffect","useState","Games","machineId","machineIdSync","store","dequeueUserData","setUserData","useSelector","axios","ipcRenderer","remote","window","require","MainScreen","setInterval","getState","userdata","pastQueue","forEach","ob","post","then","dispatch","catch","console","log","stage","setStage","un","state","uname","formItemLayout","labelCol","span","wrapperCol","onSubmit","val","uid","sendSync","did","deviceid","username","length","rate","required","message","offset","order","Math","floor","random","getCurrentWindow","close"],"mappings":"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","sourcesContent":["import { Button, Form, Input, Radio } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport Games from \"../../components/Games\";\nimport { machineId, machineIdSync } from 'node-machine-id';\nimport { store } from \"../../redux\";\nimport { dequeueUserData, setUserData } from \"../../redux/actions/userdata.action\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nconst { ipcRenderer, remote } = window.require('electron');\n\n\nfunction MainScreen() {\n    useEffect(() => {\n        setInterval(() => {\n            store.getState().userdata.pastQueue.forEach(ob => {\n                axios.post('https://thepallab.com/api/games/store', ob).then(\n                    store.dispatch(dequeueUserData(ob))\n                ).catch(console.log)\n            })\n        }, 1000)\n    })\n\n\n    var [stage, setStage] = useState({ stage: 'form' })\n    var un = useSelector((state)=>state.userdata.uname)\n    const formItemLayout = {\n        labelCol: { span: 6 },\n        wrapperCol: { span: 14 },\n    };\n    /*\n     *  deviceid: \"Deshpandw\"\n        radio-group: \"a\"\n        username: \"Ajinku\"\n    */\n    var onSubmit = (val) => {\n        var uid = (ipcRenderer.sendSync('synchronous-message', 'ping')) \n        var did = val.deviceid\n        var uname = val.username\n        store.dispatch(setUserData({uid:uid, did:did, uname:uname}))\n        setStage({stage: 'game'})\n    }\n    console.log(store.getState())\n    if (stage.stage === \"form\" && un.length==0) {\n        return <Form\n            name=\"validate_other\"\n            {...formItemLayout}\n            onFinish={onSubmit}\n            initialValues={{\n                'input-number': 3,\n                'checkbox-group': ['A', 'B'],\n                rate: 3.5,\n            }}\n        >\n            <Form.Item\n                label=\"Username\"\n                name=\"username\"\n                rules={[{ required: true, message: 'Please input your username!' }]}\n            >\n                <Input />\n            </Form.Item>\n\n            <Form.Item\n                label=\"Deviceid\"\n                name=\"deviceid\"\n                rules={[{ required: true, message: 'Please input your device id!' }]}\n            >\n                <Input />\n            </Form.Item>\n\n\n\n            <Form.Item wrapperCol={{ span: 12, offset: 6 }}>\n                <Button type=\"primary\" htmlType=\"submit\">\n                    Begin\n        </Button>\n            </Form.Item>\n        </Form>\n\n    } \n\n    else {\n        var order = Math.floor(Math.random() * 2)\n        return <Games order={order} onComplete={() => {            \n            remote.getCurrentWindow().close()\n        }} />\n    }\n\n\n\n}\n\nexport default MainScreen;"]},"metadata":{},"sourceType":"module"}